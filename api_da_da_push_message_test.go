/*
 * DaDaPush Public API
 *
 * DaDaPush: Real-time Notifications App Send real-time notifications through our API without coding and maintaining your own app for iOS or Android devices.
 *
 * API version: v1
 * Contact: contacts@dadapush.com
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package dadapushclient

import (
	"context"
	"net/http"
	"reflect"
	"testing"
)

func TestDaDaPushMessageApiService_CreateMessage(t *testing.T) {
	type fields struct {
		client *APIClient
	}
	type args struct {
		ctx               context.Context
		body              MessagePushRequest
		localVarOptionals *CreateMessageOpts
	}
	tests := []struct {
		name    string
		fields  fields
		args    args
		want    ResultOfMessagePushResponse
		want1   *http.Response
		wantErr bool
	}{
		// TODO: Add test cases.
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			a := &DaDaPushMessageApiService{
				client: tt.fields.client,
			}
			got, got1, err := a.CreateMessage(tt.args.ctx, tt.args.body, tt.args.localVarOptionals)
			if (err != nil) != tt.wantErr {
				t.Errorf("DaDaPushMessageApiService.CreateMessage() error = %v, wantErr %v", err, tt.wantErr)
				return
			}
			if !reflect.DeepEqual(got, tt.want) {
				t.Errorf("DaDaPushMessageApiService.CreateMessage() got = %v, want %v", got, tt.want)
			}
			if !reflect.DeepEqual(got1, tt.want1) {
				t.Errorf("DaDaPushMessageApiService.CreateMessage() got1 = %v, want %v", got1, tt.want1)
			}
		})
	}
}

func TestDaDaPushMessageApiService_DeleteMessage(t *testing.T) {
	type fields struct {
		client *APIClient
	}
	type args struct {
		ctx               context.Context
		messageId         int64
		localVarOptionals *DeleteMessageOpts
	}
	tests := []struct {
		name    string
		fields  fields
		args    args
		want    Result
		want1   *http.Response
		wantErr bool
	}{
		// TODO: Add test cases.
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			a := &DaDaPushMessageApiService{
				client: tt.fields.client,
			}
			got, got1, err := a.DeleteMessage(tt.args.ctx, tt.args.messageId, tt.args.localVarOptionals)
			if (err != nil) != tt.wantErr {
				t.Errorf("DaDaPushMessageApiService.DeleteMessage() error = %v, wantErr %v", err, tt.wantErr)
				return
			}
			if !reflect.DeepEqual(got, tt.want) {
				t.Errorf("DaDaPushMessageApiService.DeleteMessage() got = %v, want %v", got, tt.want)
			}
			if !reflect.DeepEqual(got1, tt.want1) {
				t.Errorf("DaDaPushMessageApiService.DeleteMessage() got1 = %v, want %v", got1, tt.want1)
			}
		})
	}
}

func TestDaDaPushMessageApiService_GetMessage(t *testing.T) {
	type fields struct {
		client *APIClient
	}
	type args struct {
		ctx               context.Context
		messageId         int64
		localVarOptionals *GetMessageOpts
	}
	tests := []struct {
		name    string
		fields  fields
		args    args
		want    ResultOfMessageObject
		want1   *http.Response
		wantErr bool
	}{
		// TODO: Add test cases.
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			a := &DaDaPushMessageApiService{
				client: tt.fields.client,
			}
			got, got1, err := a.GetMessage(tt.args.ctx, tt.args.messageId, tt.args.localVarOptionals)
			if (err != nil) != tt.wantErr {
				t.Errorf("DaDaPushMessageApiService.GetMessage() error = %v, wantErr %v", err, tt.wantErr)
				return
			}
			if !reflect.DeepEqual(got, tt.want) {
				t.Errorf("DaDaPushMessageApiService.GetMessage() got = %v, want %v", got, tt.want)
			}
			if !reflect.DeepEqual(got1, tt.want1) {
				t.Errorf("DaDaPushMessageApiService.GetMessage() got1 = %v, want %v", got1, tt.want1)
			}
		})
	}
}

func TestDaDaPushMessageApiService_GetMessages(t *testing.T) {
	type fields struct {
		client *APIClient
	}
	type args struct {
		ctx               context.Context
		page              int32
		pageSize          int32
		localVarOptionals *GetMessagesOpts
	}
	tests := []struct {
		name    string
		fields  fields
		args    args
		want    ResultOfPageResponseOfMessageObject
		want1   *http.Response
		wantErr bool
	}{
		// TODO: Add test cases.
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			a := &DaDaPushMessageApiService{
				client: tt.fields.client,
			}
			got, got1, err := a.GetMessages(tt.args.ctx, tt.args.page, tt.args.pageSize, tt.args.localVarOptionals)
			if (err != nil) != tt.wantErr {
				t.Errorf("DaDaPushMessageApiService.GetMessages() error = %v, wantErr %v", err, tt.wantErr)
				return
			}
			if !reflect.DeepEqual(got, tt.want) {
				t.Errorf("DaDaPushMessageApiService.GetMessages() got = %v, want %v", got, tt.want)
			}
			if !reflect.DeepEqual(got1, tt.want1) {
				t.Errorf("DaDaPushMessageApiService.GetMessages() got1 = %v, want %v", got1, tt.want1)
			}
		})
	}
}
